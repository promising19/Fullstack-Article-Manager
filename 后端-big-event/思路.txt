后台开发环境
    1、执行sql脚本，准备数据库表
    2、创建spring boot工程，引入对应的依赖（web\mybatis\mysql驱动）
        ① 继承父项目
         pom.xml 文件中引入 <parent> 元素-->继承了一个父项目的配置。对于 Spring Boot 项目来说，spring-boot-starter-parent 是 Spring Boot 推荐的父 POM（项目对象模型），
         它提供了一些默认配置，简化了配置管理。
        ② 引入web\mybatis\mysql驱动依赖
        ③ 刷新工程
    3、引入mybatis的配置信息: 在yml中
    4、创建包结构，准备实体类
        在itheima中创建一些常用的包：
        ① controller-->存放controller类
        ② service-->impl-->存放一些接口的实现类
        ③ mapper-->存放mapper接口
        ④ pojo-->存放实体类
        ⑤ utils-->存放工具类
        编写实体类：
        封装从表中查询出来的数据--> Artical.java\Category.java\User.java
    5、编写启动类

开发接口
流程：明确需求-->阅读接口文档（明确接口的输入输出）-->思路分析（如何写代码）-->开发（编写代码）-->测试
    1、用户模块相关结构：
        注册
            了解用户表的表结构及其对应实体类，有利于开发
            注册用户需要填写一些信息：用户名、密码、再次输入密码、点击注册
            ①采用三层架构模型
                在controller层添加注解
            ②参数校验（根据接口文档可以发现，用户名和密码有一定的限制，如果前端传回来的参数不符合要求就不能被注册）
                在Regiest方法中进行校验，if语句
                    为了避免参数过多代码过于繁琐，使用spring提供的一个参数校验框架-->Spring Validation
                    使用步骤：
                        引入Spring Validation起步依赖
                        在参数面前添加@Pattern注解
                        在Controllerd类上添加@Validation注解
                    为了让注册结果在浏览器上的输出符合api文档，采用全局异常处理器-->处理参数校验失败异常
                        定义一个GlobalExceptionHandler类-->处理异常
        登录
            需求：输入相关信息点击登录后，判断是否登录成功，登录成功则跳转到主页，登录失败则给出对应的提示
            登录认证：在未登录的情况下不能访问其他的资源
                在其他接口提供服务之前对登录状态进行判断-->借助令牌的技术
                    浏览器访问登录接口-->登录成功-->在后台生成一个令牌-->将令牌相应给浏览器-->当浏览器访问其他接口时都需要携带令牌-->其他接口正常提供服务
                    （身份识别的作用）
                令牌就是一段字符串：
                    承载业务数据，减少后续请求查询数据库的次数
                    防篡改，保证信息的合法性和有效性
                JWT：
                    第一部分：Header（头），记录令牌类型，签名算法等
                    第二部分：Payload（有效载荷），携带一些自定义信息，默认信息
                    第三部分：Signature（签名），防止token被篡改，确保安全性
                令牌的生成：
                    使用工具生成：引入依赖，调用API生成令牌
                令牌的验证：
                    当有多个接口有同样的验证操作需要完成-->拦截器
                        在拦截器中统一完成验证
                        定义一个类实现HandlerInterceptor接口，重写方法
                        编写Web配置类，实现WebMvcConfigure接口，添加注册拦截器

        获取用户详细信息
            登录成功后用户进入首页，首页导航条需要展示相关用户信息
            定义一个方法根据用户名查询相关信息
            优化代码：
                ThreadLocal（提供线程局部变量）
                    减少参数的传递、在同一线程执行的代码间共享数据

        更新用户基本信息
            在用户基本资料中用户可以增加或想改相关资料
            在UserController添加一个update方法
                把请求的参数封装到一个实体类的对象里User，随后调用Service层的更新方法，在编写sql语句跟新Mapper中的数据库层
            参数校验
        更新用户头像
            在UserController添加一个updateAvatar方法,接受的参数是一个头像地址
            方法内部调用service层，更新头像的方法
            在mapper层编写sql更新头像
            参数校验：

        更新用户密码
            在UserController添加一个updatePwd方法,随后调用Service层的方法来实现更新，最后调用Mapper层来执行sql来更新密码

    2、文章分类模块相关接口：
    重新创建一个controller
        新增文章分类
            在Controller添加一个Category方法，随后调用service层的方法完成添加...

        文章分类列表
        获取文章分类详情
        更新文章分类
            分组校验
                把校验项进行归类分组，在完成不同功能的时候，校验指定组中的校验项
                1、定义分组
                2、定义校验项时指定归属的分组
                3、校验时指定要校验的分组

        删除文章分类

    3、文章管理模块相关接口
        新增文章
            参数校验采用自定义校验
                1、自定义注解State
                2、自定义校验数据的类StateValidation，实现ConstraintValidation
                3、在需要校验的地方使用自定义注解

        文章列表（条件分页）

        获取文章详情

        更新文章
        删除文章

    4、文件上传接口
        在用户更换头像或者更新文章是都需要携带一个url访问地址，当用户访问文件上传接口，将图片的数据上传成功后
        服务器会返回一个地址
        接收前端上传的数据并返回地址

        文件上传：
            前端三要素
                请求方式：post
                enctype：编码类型
                文件表单项的类型：file
            在参数上申明MultipartFile参数用来接收上传的内容

            仅将文件上传到本地磁盘，用户无法访问，因此要将文件上传到阿里云
            第三方服务-通用思路：
                准备工作-->参照官方SDK（软件开发工具包）编写入门程序-->集成使用


    5、登录优化
        登录成功后，给浏览器相应令牌的同时，把令牌存储到redis中
        LoginInterceptor拦截器中，需要验证浏览器携带的令牌，并同时获取到redis中存储的与之相同的令牌
        当用户修改密码后，删除redis中存储的旧令牌

        （在没有使用 Redis 存储令牌之前，通常令牌会存储服务器在内存中，或者在某些情况下数据库中。高性能、高寿命和**分布全球环境下的共享）

        SpringBoot集成redis：
            导入起步依赖
            在yml中配置文件，配置redis连接信息
            调用API完成字符串的存取操作

        令牌主动失效：
            登录成功后，给浏览器相应令牌的同时，把该令牌存储到redis中
            LoginInterceptor拦截器中，需要验证浏览器携带的令牌，并同时获取到redis中存储的与之相同的令牌
            当前用户修改密码成功后，删除redis中存储的旧令牌

    6、SpringBoot项目部署
        要把编写好的项目部署到公司服务器或云平台服务器
        把编写好的代码编译打包成一个jar包(借助一个打包插件)-->把jar包发送或拷贝到服务器上-->在服务器上执行java -jar 运行jar包

        jar包部署，要求服务器必须有jre环境

    7、属性配置方式
        项目配置文件方式

        命令行参数方式：
            在运行Java -jar命令时在后面添加参数 --键=值

        环境变量方式：
            高级系统设置，在Administrator中新建一个变量
            server.port
            7777
            环境变量发生变化后，需要重新启动黑窗口

        外部配置文件方式：
            在jar包所在目录下添加一个application.yml文件，可以批量配置要修改的文件

        多环境开发配置：
            单文件配置：
                在不同的开发场景下需要不同的配置：开发、测试、生产
                1、为每一个环境提供一个独立的配置信息
                2、Profiles隔离应用程序配置的各个部分，并在特定环境下指定部分生效
                    分割不同环境的配置
                    指定那些配置属于那个环境
                    指定那个环境的配置生效
                        #开发环境
                        spring:
                            config:
                                on-profile:dev
                        ---
                        #测试环境
                        spring:
                            config:
                                on-profile:test
                        ---
                        #生产环境

                        ---
            多文件配置：
                把不同环境的配置信息写在不同的文件中

            Profiles分组功能：
                服务器相关配置
                数据源相关配置
                自定义配置
                ...